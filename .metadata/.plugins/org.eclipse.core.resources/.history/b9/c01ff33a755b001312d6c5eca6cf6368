package com.omar.hubino.services;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.security.KeyManagementException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.cert.X509Certificate;
import java.util.ArrayList;
import java.util.List;

import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.commons.io.IOUtils;
import org.apache.http.HttpEntity;
import org.apache.http.HttpResponse;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.conn.scheme.Scheme;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;
import org.apache.log4j.Logger;
import org.json.JSONObject;

import sun.misc.BASE64Decoder;

import com.omar.hubino.bo.DataSet;
import com.omar.hubino.bo.OmarResponse;
import com.omar.hubino.bo.OpenBrResponse;
import com.omar.hubino.bo.ServiceResponse;
import com.omar.hubino.model.OmarModel;

public class OmarWeb implements IomarWeb {

	private static final Logger LOGGER = Logger.getLogger(OmarWeb.class);

	@Override
	public ServiceResponse prepareMetadata(DataSet[] dataSet) {

		LOGGER.info("STARTING prepareMetadata");
		

		ServiceResponse response = new ServiceResponse();
		
		if(dataSet != null && dataSet.length > 0) {

			String reqType = "E";
	
			response = imageProcess(dataSet, reqType, response);
			
		} else {

			LOGGER.info("   No dataset ");

			response.setMessage("E02"); // No dataset

			response.setResult(true);
		}
		
		return response;
	}

	@Override
	public ServiceResponse validateFace(DataSet[] dataSet) {

		LOGGER.info("STARTING validateFace");

		ServiceResponse response = new ServiceResponse();

		String reqType = "V";
		
		List<BasicNameValuePair> parameters = null;
		
		if (dataSet != null && dataSet.length > 0) {
			parameters = new ArrayList<BasicNameValuePair>();
			parameters.add(new BasicNameValuePair("CustomerID", dataSet[0].getUserId()));
			parameters.add(new BasicNameValuePair("APIKey", getHashKey()));
			parameters.add(new BasicNameValuePair("Action", "Authenticate"));
			
			LOGGER.info("Get the Authkey before Validation for ::"+dataSet[0].getUserId());
			String[] responseStrArr = parseJSON(getAuth("https://alpd.net/AjmanLandProperty/index.php/MobileAPI/FaceAllow", parameters));
			
			if(responseStrArr[0].equalsIgnoreCase("success"))
			{
				response = imageProcess(dataSet, reqType, response);
				
				if (response.getMessage().equals("E00")) {
					parameters = new ArrayList<BasicNameValuePair>();
					parameters.add(new BasicNameValuePair("CustomerID", dataSet[0].getUserId()));
					parameters.add(new BasicNameValuePair("APIKey", getHashKey()));
					parameters.add(new BasicNameValuePair("EnrollmentStatus", "Enrolled"));
					parameters.add(new BasicNameValuePair("AlgorithmScore", ""));
					
					LOGGER.info("Update user status to the client service");
					getAuth("https://alpd.net/AjmanLandProperty/index.php/MobileAPI/FaceEnrollmentStatus", parameters);
				}
			}
		} else {

			LOGGER.info("   No dataset ");
	
			response.setMessage("E02"); // No dataset
	
			response.setResult(true);
		}

		return response;
	}
	
	public static String[] parseJSON(String json) {
		String result[] = new String[4];
		try {
			if(json != null)
			{
				JSONObject data = new JSONObject(json);
				System.out.println(data.getString("Status"));
				System.out.println(data.getString("StatusCode"));
				System.out.println(data.getString("FaceAuthKey"));
				System.out.println(data.getString("Message"));
				LOGGER.info("1:: "+data.getString("Status")+"2:: "+data.getString("StatusCode")+ "3:: "+data.getString("FaceAuthKey")+ "4:: "+data.getString("Message"));
				
				result[0] = data.getString("Status");
				result[1] = data.getString("StatusCode");
				result[2] = data.getString("FaceAuthKey");
				result[3] = data.getString("Message");
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
		return result;
	}
	
	public static String getAuth(String url, List<BasicNameValuePair> parameters) {
		String responseBody = null;
		try {
			HttpPost httppost = new HttpPost(url);	
			
			httppost.setEntity(new UrlEncodedFormEntity(parameters));
			
			HttpClient httpclient = httpClientTrustingAllSSLCerts();
			HttpResponse httpResponse = httpclient.execute(httppost);
			HttpEntity resEntity = httpResponse.getEntity();
			
			// Get the HTTP Status Code
			int statusCode = httpResponse.getStatusLine().getStatusCode();
			
			// Get the contents of the response
			InputStream input = resEntity.getContent();
			responseBody = IOUtils.toString(input);
			input.close();
			
			// Print the response code and message body
			System.out.println("HTTP Status Code: " + statusCode);
			System.out.println(responseBody);
			LOGGER.info("responseBody::"+responseBody);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return responseBody;
	}
	
	public static String getHashKey() {
		StringBuffer hexString = new StringBuffer();
		try {
			MessageDigest md = MessageDigest.getInstance("SHA-1");
			FileInputStream fis = new FileInputStream("/etc/ssl/certs/faceapikey");

			byte[] dataBytes = new byte[1024];

			int nread = 0;
			while ((nread = fis.read(dataBytes)) != -1) {
				md.update(dataBytes, 0, nread);
			}
			;
			byte[] mdbytes = md.digest();
			
			// convert the byte to hex format method
			
			for (int i = 0; i < mdbytes.length; i++) {
				hexString.append(Integer.toHexString(0xFF & mdbytes[i]));
			}

			System.out.println("Hex format : " + hexString.toString());
		} catch (Exception e) {
			e.printStackTrace();
		}		
		return hexString.toString();
	}
	
	private static DefaultHttpClient httpClientTrustingAllSSLCerts() throws NoSuchAlgorithmException, KeyManagementException {
        DefaultHttpClient httpclient = new DefaultHttpClient();

        SSLContext sc = SSLContext.getInstance("SSL");
        sc.init(null, getTrustingManager(), new java.security.SecureRandom());

        SSLSocketFactory socketFactory = new SSLSocketFactory(sc);
        Scheme sch = new Scheme("https", 443, socketFactory);
        httpclient.getConnectionManager().getSchemeRegistry().register(sch);
        return httpclient;
    }

    private static TrustManager[] getTrustingManager() {
        TrustManager[] trustAllCerts = new TrustManager[] { new X509TrustManager() {
            @Override
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {
                return null;
            }

            @Override
            public void checkClientTrusted(X509Certificate[] certs, String authType) {
                // Do nothing
            }

            @Override
            public void checkServerTrusted(X509Certificate[] certs, String authType) {
                // Do nothing
            }

        } };
        return trustAllCerts;
    }

	public ServiceResponse imageProcess(DataSet[] dataSet, String reqType, ServiceResponse response) {
		try {

			OmarResponse omarResponse = OmarModel.checkEnrollment(dataSet[0].getUserId(), reqType);

			if (omarResponse.isResult()) {

				omarResponse = OmarModel.storeImages(dataSet, reqType);

				File checkFile = new File(omarResponse.getImagePath());

				String[] dirFiles = checkFile.list();

				if (dirFiles != null && dirFiles.length > 0) {
					
					OpenBrResponse openBrResponse = null;
					if(reqType.equals("E"))
					{

						LOGGER.info("No of Training Images :: "	+ dirFiles.length);

						openBrResponse = OperBrNativePlugin.getInstance().brEnrollment(omarResponse.getImagePath(), omarResponse.getGalPath());
					}
					else
					{
						LOGGER.info("No of AuthenticationImages :: " + dirFiles.length);
						
						openBrResponse = OperBrNativePlugin.getInstance().brAthentication(omarResponse.getImagePath(), omarResponse.getGalPath(), 5, 3);
					}

					OmarModel.updateImageStatus(openBrResponse,	dataSet[0].getUserId(), reqType, omarResponse.getTrackingId());

					LOGGER.info(" Successfully completed ");

					if (openBrResponse.isResult()) {
						response.setMessage("E00"); // Successfully completed

						response.setResult(true);
					} else {
						response.setMessage("E01"); // Failure

						response.setResult(true);
					}

				} else {

					LOGGER.info("  No Image Found in source ");

					response.setMessage("E03"); // No Image Found in source Folder
					response.setResult(true);
				}

			} else {
				LOGGER.info(omarResponse.getMessage());

				response.setMessage(omarResponse.getMessage());

				response.setResult(true);
			}

		} catch (Exception e) {

			response.setMessage("E01"); // Exception

			response.setResult(false);

			LOGGER.error("Error :: " + e.getMessage());

			e.printStackTrace();

		}

		LOGGER.info("Response Message :: " + response.getMessage());
		LOGGER.info("Response Result (bool) :: " + response.isResult());

		LOGGER.info("END");

		return response;
	}

	@Override
	public ServiceResponse androidService(String[] images, String userId,
			String serviceType) {

		DataSet dataSet = null;
		int length = images.length;
		DataSet[] dataSetArray = new DataSet[length];
		ServiceResponse serviceResponse = new ServiceResponse();
		try {
			for (int i = 0; i < length; i++) {
				dataSet = new DataSet();
				BASE64Decoder decoder = new BASE64Decoder();
				try {
					dataSet.setData(decoder.decodeBuffer(images[i]));
				} catch (IOException e) {
					e.printStackTrace();
				}
				dataSet.setUserId(userId);
				dataSetArray[i] = dataSet;
			}

			if (serviceType.equals("validateFace"))
				serviceResponse = validateFace(dataSetArray);
			else
				serviceResponse = prepareMetadata(dataSetArray);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return serviceResponse;
	}
	
	public ServiceResponse customerStatusUpdate(String userId, String userStatus) {
		ServiceResponse serviceResponse = new ServiceResponse();
		try {
			serviceResponse = OmarModel.customerStatusUpdate(userId, userStatus);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return serviceResponse;
	}

	/*
	 * public static void main(String[] args) {
	 * 
	 * OmarWebService service = new OmarWebService();
	 * service.calculateResult("/home/viji/Documents/SoforOpenBr/FaceFaceRecog.csv"
	 * ); }
	 */

}
